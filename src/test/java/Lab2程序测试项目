import java.util.HashMap;
import java.util.Map;

/**
 *
 * 给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以字符串形式返回小数。
 * 如果小数部分为循环小数，则将循环的部分括在括号内。
 * 如果存在多个答案，只需返回任意一个。
 * 对于所有给定的输入，保证答案字符串的长度小于 104。
 * 示例 1：
 * 输入：numerator = 1, denominator = 2
 * 输出："0.5"
 * 示例 2：
 * 输入：numerator = 2, denominator = 1
 * 输出："2"
 * 示例 3：
 * 输入：numerator = 4, denominator = 333
 * 输出："0.(012)"
 */
class Solution1 {
    public String fractionToDecimal(int numerator, int denominator) {
        if (numerator % denominator == 0) {
            return String.valueOf(numerator / denominator);
        }

        StringBuilder sb = new StringBuilder();

        // 处理符号
        if ((numerator < 0) ^ (denominator < 0)) {
            sb.append('-');
        }

        // 取绝对值
        numerator = Math.abs(numerator);
        denominator = Math.abs(denominator);

        // 整数部分
        sb.append(numerator / denominator);
        sb.append('.'); // 添加小数点

        // 小数部分
        StringBuilder fractionPart = new StringBuilder();
        Map<Integer, Integer> remainderIndexMap = new HashMap<>();
        int remainder = numerator % denominator;
        int index = 0;

        while (remainder != 0) {
            if (remainderIndexMap.containsKey(remainder)) {
                // 处理循环小数
                int insertIndex = remainderIndexMap.get(remainder);
                fractionPart.insert(insertIndex, '(');
                fractionPart.append(')');
                break;
            }

            remainderIndexMap.put(remainder, index);
            remainder *= 10;
            fractionPart.append(remainder / denominator);
            remainder %= denominator;
            index++;
        }

        sb.append(fractionPart.toString());
        return sb.toString();
    }

    // 测试代码
    public static void main(String[] args) {
        Solution1 solution = new Solution1();
        System.out.println(solution.fractionToDecimal(1, 2));  // 输出 "0.5"
        System.out.println(solution.fractionToDecimal(2, 1));  // 输出 "2"
        System.out.println(solution.fractionToDecimal(4, 333));  // 输出 "0.(012)"
    }
}
